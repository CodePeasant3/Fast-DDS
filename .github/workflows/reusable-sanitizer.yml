name: Sanitizer analysis reusable workflow

on:
  workflow_call:
    inputs:
      label:
        description: 'ID associated to the workflow'
        required: true
        type: string
      colcon_meta:
        description: 'Path of the colcon meta file'
        required: false
        type: string
      cmake_args:
        description: 'CMake Compilation Flags'
        required: false
        type: string
      ctest_args:
        description: 'CTest Testing Flags'
        required: false
        type: string
      fastdds_branch:
        description: 'Branch or tag of Fast DDS repository (https://github.com/eProsima/Fast-DDS)'
        required: true
        type: string
        default: 'master'
      discovery_server_branch:
        description: 'Branch or tag of Discovery Server repository (https://github.com/eProsima/Discovery-Server)'
        required: false
        type: string
        default: 'master'
      asan_report:
        description: 'Run the address sanitizer report job step(s)'
        required: false
        default: 'false'
        type: string
      asan_discovery_server_report:
        description: 'Run the address discovery server sanitizer report job step(s)'
        required: false
        default: 'false'
        type: string
      tsan_report:
        description: 'Run the thread sanitizer report job step(s)'
        required: false
        default: 'false'
        type: string

defaults:
  run:
    shell: bash

jobs:

  reusable-sanitizer-run:
    runs-on: ubuntu-22.04

    steps:
      - name: Add ci-pending label if PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: eProsima/eProsima-CI/external/add_labels@v0
        with:
          labels: ci-pending
          number: ${{ github.event.number }}
          repo: eProsima/Fast-DDS

      # https://github.com/actions/runner-images/issues/9491
      - name: Fix kernel mmap rnd bits
        run: sudo sysctl vm.mmap_rnd_bits=28

      - name: Sync eProsima/Fast-DDS repository
        uses: eProsima/eProsima-CI/external/checkout@v0
        with:
          path: src/fastrtps
          ref: ${{ inputs.fastdds_branch }}

      - name: Get minimum supported version of CMake
        uses: eProsima/eProsima-CI/external/get-cmake@v0
        with:
          cmakeVersion: '3.22.6'

      - name: Install apt packages
        uses: eProsima/eProsima-CI/ubuntu/install_apt_packages@v0
        with:
          packages: curl grep libasio-dev libtinyxml2-dev python3 python3-pip software-properties-common wget

      - name: Install GTest
        uses: eProsima/eProsima-CI/ubuntu/install_gtest@v0
        with:
          version: release-1.11.0

      - name: Install colcon
        uses: eProsima/eProsima-CI/ubuntu/install_colcon@v0

      - name: Install Python dependencies
        uses: eProsima/eProsima-CI/ubuntu/install_python_packages@v0
        with:
          packages: vcstool setuptools gcovr tomark xmltodict jsondiff pandas

      - name: Setup CCache
        uses: eProsima/eProsima-CI/external/setup-ccache-action@v0

      - name: Download Fast DDS .repos
        uses: eProsima/eProsima-CI/ubuntu/vcs_import@v0
        with:
          vcs_repos_file: ./src/fastrtps/fastrtps.repos
          destination_workspace: src
          skip_existing: 'true'

      - name: Sync eProsima/Discovery-Server repository
        if : ${{ inputs.asan_discovery_server_report == 'true' }}
        uses: actions/checkout@v4
        with:
          path: src/discovery_server
          repository: eProsima/Discovery-Server
          ref: ${{ inputs.discovery_server_branch }}

      - name: Colcon build
        continue-on-error: false
        uses: eProsima/eProsima-CI/multiplatform/colcon_build@v0
        with:
          colcon_meta_file: '${{ inputs.colcon_meta }}'
          colcon_build_args: ''
          colcon_build_args_default: ''
          cmake_args: '${{ inputs.cmake_args }}'
          cmake_args_default: ''
          cmake_build_type: Release
          workspace: ${{ github.workspace }}
          workspace_dependencies: ''

      - name: Colcon test
        id: test
        uses: eProsima/eProsima-CI/multiplatform/colcon_test@v0
        with:
          colcon_test_args: ''
          colcon_test_args_default: '--event-handlers=console_direct+ --return-code-on-test-failure'
          ctest_args: '${{ inputs.ctest_args }}'
          ctest_args_default: ''
          packages_names: fastrtps
          workspace: ${{ github.workspace }}
          workspace_dependencies: ''
          test_report_artifact: ${{ format('test_report_{0}', github.job, join(matrix.*, '_')) }}

      - name: Upload Logs
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.label }}-logs
          path: log/
        if: always()

      - name: Report sanitizer errors
        if: ${{ inputs.asan_report == 'true' }}
        run: |
          bash src/fastrtps/.github/workflows/utils/specific_errors_filter.sh "==ERROR:" log/latest_test/fastrtps/stdout_stderr.log _tmp_specific_error_file.log
          python3 src/fastrtps/.github/workflows/utils/log_parser.py --log-file log/latest_test/fastrtps/stdout_stderr.log --specific-error-file _tmp_specific_error_file.log --output-file $GITHUB_STEP_SUMMARY --sanitizer asan

      - name: Report discovery server sanitizer errors
        if: ${{ inputs.asan_discovery_server_report == 'true' }}
        run: |
          bash src/fastrtps/.github/workflows/utils/specific_errors_filter.sh "==ERROR:" log/latest_test/discovery-server/stdout_stderr.log _tmp_specific_error_file.log
          python3 src/fastrtps/.github/workflows/utils/log_parser.py --log-file log/latest_test/discovery-server/stdout_stderr.log --specific-error-file _tmp_specific_error_file.log --output-file $GITHUB_STEP_SUMMARY --sanitizer=asan

      - name: Process sanitizer reports
        if: ${{ inputs.tsan_report == 'true' }}
        id: report_summary
        shell: pwsh
        continue-on-error: true
        run: |
          # Create a dir for the exportsTSAN_OPTIONSDirectory -Path ./exports
          # Move to the reports dir
          pushd ./log/latest_test/fastrtps
          # Install the report parser module
          Find-Module -Repository PSGallery -Name SanReportParser | Install-Module -Scope CurrentUser -Force
          # Parse the report files
          $rp = Show-Tsan -Path ./stdout_stderr.log
          # filter duplicates
          $rp = $rp | group md5hash | % { $_.group[0] }
          # Export raw data
          $rp | Export-CliXML (Join-Path $exports all_reports.xml)
          # Group the reports by issue
          $g = $rp | group fuzzhash
          # Split up deadlocks and race reports
          $gd = $rp | ? type -match dead | group fuzzhash
          $gr = $rp | ? type -match race | group fuzzhash
          # Simplified deadlock summary (only one representative report and tests associated)
          $sd = $gd | Sort-Object count -desc | select @{l="fuzzhash";e="name"}, count, `
              @{l="échantillon";e={$_.group[0].report}}, @{l="tests"; `
                  e={$_.group.file | sls "(.*)\.\d+$" | % { $_.Matches.Groups[1].Value } | Sort-Object | get-unique}}
          # Simplified race summary (only one representative report and tests associated)
          $sr = $gr | Sort-Object count -desc | select @{l="fuzzhash";e="name"}, count, `
              @{l="échantillon";e={$_.group[0].report}}, @{l="tests"; `
                  e={$_.group.file | sls "(.*)\.\d+$" | % { $_.Matches.Groups[1].Value } | Sort-Object | get-unique}}
          # Export simplified summaries
          $sd, $sr | Export-Clixml (Join-Path $exports summary_data.xml)
          # Export CSV summary of frequencies
          $sd | select fuzzhash, count | Export-CSV -Path (Join-Path $exports deadlocks.csv)
          $sr | select fuzzhash, count | Export-CSV -Path (Join-Path $exports races.csv)
          # Export test mappings
          & {$sd; $sr} | Sort-Object { [int]$_.fuzzhash} | % { $fuzzy=$_.fuzzhash;$_.tests |
            select @{l="fuzzhash";e={$fuzzy}}, @{l="test";e={$_}}} |
            Export-Csv (Join-Path $exports issue_test_map.csv)
          # Keep a file per issue
          $dir = New-Item -ItemType Directory -Path (Join-Path $exports reports)
          & {$sd; $sr} | % { $_.échantillon | Out-File (Join-Path $dir "$($_.fuzzhash).tsan") }
          # Create a summary table
          @{Type="Deadlock";Failed=$sd.count;Hashes=$sd.fuzzhash},
          @{Type="Data race";Failed=$sr.count;Hashes=$sr.fuzzhash} |
            % { $_.Summary = $_.Hashes | select -First 5  | Join-String -Separator ", "
                if ($_.Hashes.count -gt 5 ) {
                    $_.Summary += ", ..." }; $_ } |
              % { [PSCustomObject]$_} |
              New-MDTable -Columns ([ordered]@{Failed=$null;Type=$null;Summary=$null}) |
              Out-File $Env:GITHUB_STEP_SUMMARY
          # The step fails on new deadlocks
          $LASTEXITCODE=$sd.count

      - name: Archive sanitation results
        if: ${{ inputs.tsan_report == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.label }}-sanitation-report
          path: exports/*

      - name: Check on failures
        if: ${{ steps.report_summary.outcome == 'failure' && inputs.tsan_report == 'true'}}
        shell: pwsh
        run: |
          Write-Host ${{ steps.report_summary.outcome }}
          exit 1
